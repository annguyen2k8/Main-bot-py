[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "typing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "typing",
        "description": "typing",
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "discord",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "discord",
        "description": "discord",
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "app_commands",
        "importPath": "discord",
        "description": "discord",
        "isExtraImport": true,
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "app_commands",
        "importPath": "discord",
        "description": "discord",
        "isExtraImport": true,
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "app_commands",
        "importPath": "discord",
        "description": "discord",
        "isExtraImport": true,
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "RotatingFileHandler",
        "importPath": "logging.handlers",
        "description": "logging.handlers",
        "isExtraImport": true,
        "detail": "logging.handlers",
        "documentation": {}
    },
    {
        "label": "AntiInvite",
        "kind": 6,
        "importPath": "cogs.anti_invite.main",
        "description": "cogs.anti_invite.main",
        "peekOfCode": "class AntiInvite(commands.Cog):\n    bot:commands.Bot\n    if not os.path.exists(\"cogs\\\\anti_invite\\\\database\"):\n        os.makedirs(\"cogs\\\\anti_invite\\\\database\")\n    path_database:str = \"cogs\\\\anti_invite\\\\database\\\\database.db\"\n    con:sqlite3.Connection = sqlite3.connect(path_database)\n    cur:sqlite3.Cursor = con.cursor()\n    def __init__(self, bot:commands.Bot) -> None:\n        ...\n        self.bot = bot",
        "detail": "cogs.anti_invite.main",
        "documentation": {}
    },
    {
        "label": "is_invite",
        "kind": 2,
        "importPath": "cogs.anti_invite.main",
        "description": "cogs.anti_invite.main",
        "peekOfCode": "def is_invite(link):\n    pattern = r'(discord\\.gg/|discordapp\\.com/invite/|discord\\.com/invite/)[a-zA-Z0-9]+'\n    if re.search(pattern, link):\n        return True\n    else:\n        return False\ndef is_owner(interaction: discord.Interaction):\n    return interaction.user.id == interaction.guild.owner_id\nclass AntiInvite(commands.Cog):\n    bot:commands.Bot",
        "detail": "cogs.anti_invite.main",
        "documentation": {}
    },
    {
        "label": "is_owner",
        "kind": 2,
        "importPath": "cogs.anti_invite.main",
        "description": "cogs.anti_invite.main",
        "peekOfCode": "def is_owner(interaction: discord.Interaction):\n    return interaction.user.id == interaction.guild.owner_id\nclass AntiInvite(commands.Cog):\n    bot:commands.Bot\n    if not os.path.exists(\"cogs\\\\anti_invite\\\\database\"):\n        os.makedirs(\"cogs\\\\anti_invite\\\\database\")\n    path_database:str = \"cogs\\\\anti_invite\\\\database\\\\database.db\"\n    con:sqlite3.Connection = sqlite3.connect(path_database)\n    cur:sqlite3.Cursor = con.cursor()\n    def __init__(self, bot:commands.Bot) -> None:",
        "detail": "cogs.anti_invite.main",
        "documentation": {}
    },
    {
        "label": "ManageVoice",
        "kind": 6,
        "importPath": "cogs.manage_voice.main",
        "description": "cogs.manage_voice.main",
        "peekOfCode": "class ManageVoice(commands.Cog):\n    def __init__(self, bot: commands.Bot) -> None:\n        self.bot = bot\n    @app_commands.command(name= \"setup_voice\", description= \"setup a duplicate voice channel.\")\n    async def setup_voice(self, interaction: discord.Interaction):\n        ...\nasync def setup(self, bot: commands.Bot):\n    await bot.add_cog(ManageVoice(bot))",
        "detail": "cogs.manage_voice.main",
        "documentation": {}
    },
    {
        "label": "TOKEN",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "TOKEN = os.environ.get(\"token_main_bot\")\ncolor_embed = discord.Colour.dark_theme()\nprefix = 'cat!', 'c!'",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "color_embed",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "color_embed = discord.Colour.dark_theme()\nprefix = 'cat!', 'c!'",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "prefix",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "prefix = 'cat!', 'c!'",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "version:float",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "version:float = 1.0\nauthor:str = \"annguyen2k8\"\ngithub:str = \"null\"\nfrom discord.ext import commands    \nfrom discord import app_commands\nimport discord\nimport asyncio\nfrom config import *\nfrom datetime import datetime\nimport os",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "author:str",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "author:str = \"annguyen2k8\"\ngithub:str = \"null\"\nfrom discord.ext import commands    \nfrom discord import app_commands\nimport discord\nimport asyncio\nfrom config import *\nfrom datetime import datetime\nimport os\nimport logging",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "github:str",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "github:str = \"null\"\nfrom discord.ext import commands    \nfrom discord import app_commands\nimport discord\nimport asyncio\nfrom config import *\nfrom datetime import datetime\nimport os\nimport logging\nfrom logging.handlers import RotatingFileHandler",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "logger = logging.getLogger('discord') \nlogger.setLevel(logging.INFO) \nhandler = logging.StreamHandler()\nformat_handler = '\\33[90m%(asctime)s \\33[0m\\33[94m%(levelname)s\\33[0m \\33[95m%(name)s\\33[0m %(message)s'\nhandler.setFormatter(logging.Formatter(format_handler, datefmt='%Y-%m-%d %H:%M:%S'))\nlogger.addHandler(handler)\n#* Nah its bad to save your disk (maybe)\n# current_time = datetime.now().strftime(\"%Y_%m_%d_%H_%M_%S\")\n# log_file = f\"logs\\\\log_{current_time}.log\"\n# file_handler = RotatingFileHandler(log_file, encoding='utf-8', mode='a', backupCount= 2, maxBytes= 5*5*1024)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "handler",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "handler = logging.StreamHandler()\nformat_handler = '\\33[90m%(asctime)s \\33[0m\\33[94m%(levelname)s\\33[0m \\33[95m%(name)s\\33[0m %(message)s'\nhandler.setFormatter(logging.Formatter(format_handler, datefmt='%Y-%m-%d %H:%M:%S'))\nlogger.addHandler(handler)\n#* Nah its bad to save your disk (maybe)\n# current_time = datetime.now().strftime(\"%Y_%m_%d_%H_%M_%S\")\n# log_file = f\"logs\\\\log_{current_time}.log\"\n# file_handler = RotatingFileHandler(log_file, encoding='utf-8', mode='a', backupCount= 2, maxBytes= 5*5*1024)\n# file_handler.setFormatter(logging.Formatter('%(asctime)s %(levelname)s %(name)s %(message)s', datefmt='%Y-%m-%d %H:%M:%S'))\n# logger.addHandler(file_handler)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "format_handler",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "format_handler = '\\33[90m%(asctime)s \\33[0m\\33[94m%(levelname)s\\33[0m \\33[95m%(name)s\\33[0m %(message)s'\nhandler.setFormatter(logging.Formatter(format_handler, datefmt='%Y-%m-%d %H:%M:%S'))\nlogger.addHandler(handler)\n#* Nah its bad to save your disk (maybe)\n# current_time = datetime.now().strftime(\"%Y_%m_%d_%H_%M_%S\")\n# log_file = f\"logs\\\\log_{current_time}.log\"\n# file_handler = RotatingFileHandler(log_file, encoding='utf-8', mode='a', backupCount= 2, maxBytes= 5*5*1024)\n# file_handler.setFormatter(logging.Formatter('%(asctime)s %(levelname)s %(name)s %(message)s', datefmt='%Y-%m-%d %H:%M:%S'))\n# logger.addHandler(file_handler)\n#* Setup bot",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "bot",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "bot = commands.Bot(command_prefix= prefix,\n                   intents= discord.Intents.all(), \n                   help_command= None)\n@bot.event\nasync def on_connect():\n    #* Loop print ping about 5min/time (you can option)\n    logger_ = logging.getLogger('discord.ping') \n    while True:\n        logger_.info(f'Ping {round(bot.latency * 1000)}ms')\n        await asyncio.sleep(300)",
        "detail": "main",
        "documentation": {}
    }
]